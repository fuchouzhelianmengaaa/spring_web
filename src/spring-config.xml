<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/aop
       http://www.springframework.org/schema/aop/spring-aop.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">
    <!--告诉Spring,启用注解方式的配置 -->
    <!--<context:annotation-config></context:annotation-config>-->
    <!-- 自动扫描指定的包及子包中的类，根据注解进行注册并进行装配-->
    <context:component-scan base-package="com.demo">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"></context:exclude-filter>
    </context:component-scan>

 <!--   <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
-->


<!--
    <context:property-placeholder location="classpath:db.properties" ignore-unresolvable="true"></context:property-placeholder>
-->

   <!--根据代码中的注解进行事务控制-->
    <!--<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->

     <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
         <property name="dataSource" ref="dataSource"></property>
     </bean>-->
    <!--   <tx:advice id="transactionInterceptor" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="find*" read-only="true" rollback-for="java.lang.Exception"/>
            <tx:method name="search*" read-only="true"  rollback-for="java.lang.Exception"></tx:method>
            <tx:method name="*"  rollback-for="java.lang.Exception"></tx:method>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <aop:pointcut id="pc1" expression="execution(public * com.demo.service..*.*(..))"></aop:pointcut>
        <aop:advisor advice-ref="transactionInterceptor" pointcut-ref="pc1"></aop:advisor>
    </aop:config>-->

<!--     <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
         <property name="defaultAutoCommit" value="false"></property>
         <property name="driverClassName" value="${driver.name}"></property>
         <property name="url" value="${db.url}"></property>
         <property name="username" value="root"></property>
         <property name="password" value="5211314."></property>
     </bean>-->


   <!-- <bean id="productDao" class="com.demo.dao.ProductDaoImp">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <bean id="productService" class="com.demo.service.ProductServiceImp">
        <property name="productDao"  ref="productDao"></property>
    </bean>-->


 <!--   <bean id="productService" class="com.demo.service.ProductServiceImp">
        &lt;!&ndash;<property name="productMapper" ref="productMapper"></property>&ndash;&gt;
    </bean>-->

    <!--和MyBatis相关的配置-->
 <!--   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">

        <property name="dataSource" ref="dataSource"></property>
        <property name="typeAliasesPackage" value="com.demo.beans"></property>
        <property name="mapperLocations">
            <array>
                <value>classpath:com/demo/mapper/*Mapper.xml</value>
            </array>
        </property>
    </bean>-->

    <!--<bean id="productMapper" class="org.mybatis.spring.mapper.MapperFactoryBean">
        <property name="sqlSessionFactory" ref="sqlSessionFactory"></property>
        <property name="mapperInterface" value="com.demo.dao.ProductMapper"></property>
    </bean>-->

    <!-- 自动扫描com.demo.dao包下的所有Mapper接口,创建接口的对应的实例，Bean对象的名字就是接口的简单名-->
  <!--  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.demo.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>-->




</beans>